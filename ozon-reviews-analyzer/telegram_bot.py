"""
Telegram-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ Ozon
"""
import os
import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏–∑–∞
from ozon_reviews_analyzer import analyze_product_reviews

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_PRODUCT, WAITING_FOR_RATING = range(2)

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
EMOJI = {
    'star': '‚≠ê',
    'chart': 'üìä',
    'target': 'üéØ',
    'package': 'üì¶',
    'clock': '‚è∞',
    'check': '‚úÖ',
    'cross': '‚ùå',
    'info': '‚ÑπÔ∏è',
    'warning': '‚ö†Ô∏è',
    'rocket': 'üöÄ'
}


class OzonReviewsBot:
    """–ö–ª–∞—Å—Å Telegram-–±–æ—Ç–∞"""
    
    def __init__(self, token: str):
        self.token = token
        self.user_sessions: Dict[int, Dict] = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! {EMOJI['rocket']}\n\n"
            f"–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Ozon –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, "
            f"—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö 5-–∑–≤–µ–∑–¥–æ—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.\n\n"
            f"{EMOJI['info']} <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            f"1. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /analyze\n"
            f"2. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª\n"
            f"3. –£–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n\n"
            f"{EMOJI['chart']} <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            f"/examples - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analyze")],
            [InlineKeyboardButton("üìñ –ü—Ä–∏–º–µ—Ä—ã", callback_data="show_examples")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_html(
            welcome_text,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            f"{EMOJI['info']} <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            f"<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
            f"{EMOJI['check']} –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–æ–≤ Ozon\n"
            f"{EMOJI['check']} –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥\n"
            f"{EMOJI['check']} –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 5‚òÖ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ü–µ–ª–∏\n\n"
            f"<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
            f"‚Ä¢ –í–µ—Å –æ—Ç–∑—ã–≤–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –≤–µ—Å—è—Ç –±–æ–ª—å—à–µ —Å—Ç–∞—Ä—ã—Ö\n"
            f"‚Ä¢ –û—Ç–∑—ã–≤—ã —Å—Ç–∞—Ä—à–µ 365 –¥–Ω–µ–π –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è\n\n"
            f"<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b>\n"
            f"‚Ä¢ –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä\n"
            f"‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª (—á–∏—Å–ª–æ–≤–æ–π ID)\n"
            f"‚Ä¢ –ß–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º"
        )
        
        await update.message.reply_html(help_text)
    
    async def examples_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        examples_text = (
            f"{EMOJI['info']} <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n"
            f"‚Ä¢ <code>https://www.ozon.ru/product/example-123456789</code>\n"
            f"‚Ä¢ <code>123456789</code>\n"
            f"‚Ä¢ <code>product/example-123456789</code>\n\n"
            f"<b>–¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b>\n"
            f"‚Ä¢ –õ—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 5.0\n"
            f"‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 4.5, 4.7, 4.85\n\n"
            f"{EMOJI['warning']} <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è, "
            f"—Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–∞</i>"
        )
        
        await update.message.reply_html(examples_text)
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        await update.message.reply_text(
            f"{EMOJI['package']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Ozon –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª:\n\n"
            f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.ozon.ru/product/...</i>",
            parse_mode=ParseMode.HTML
        )
        
        return WAITING_FOR_PRODUCT
    
    async def receive_product(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä"""
        user_id = update.effective_user.id
        product_input = update.message.text.strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['product_input'] = product_input
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("4.0", callback_data="rating_4.0"),
                InlineKeyboardButton("4.2", callback_data="rating_4.2"),
                InlineKeyboardButton("4.5", callback_data="rating_4.5")
            ],
            [
                InlineKeyboardButton("4.6", callback_data="rating_4.6"),
                InlineKeyboardButton("4.7", callback_data="rating_4.7"),
                InlineKeyboardButton("4.8", callback_data="rating_4.8")
            ],
            [
                InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="rating_custom")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{EMOJI['target']} –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
            reply_markup=reply_markup
        )
        
        return WAITING_FOR_RATING
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "start_analyze":
            await query.message.reply_text(
                f"{EMOJI['package']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Ozon –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª:",
                parse_mode=ParseMode.HTML
            )
            return WAITING_FOR_PRODUCT
            
        elif query.data == "show_examples":
            examples_text = (
                f"{EMOJI['info']} <b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
                f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –≤–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n"
                f"‚Ä¢ <code>https://www.ozon.ru/product/example-123456789</code>\n"
                f"‚Ä¢ <code>123456789</code>\n"
                f"‚Ä¢ <code>product/example-123456789</code>\n\n"
                f"<b>–¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b>\n"
                f"‚Ä¢ –õ—é–±–æ–µ —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 5.0\n"
                f"‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 4.5, 4.7, 4.85"
            )
            await query.message.reply_html(examples_text)
            return ConversationHandler.END
            
        elif query.data.startswith("rating_"):
            rating_value = query.data.replace("rating_", "")
            
            if rating_value == "custom":
                await query.message.reply_text(
                    f"{EMOJI['target']} –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1.0 –¥–æ 5.0):"
                )
                return WAITING_FOR_RATING
            else:
                context.user_data['target_rating'] = float(rating_value)
                await self.perform_analysis(query.message, context)
                return ConversationHandler.END
    
    async def receive_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        try:
            rating = float(update.message.text.strip().replace(',', '.'))
            
            if not 1.0 <= rating <= 5.0:
                await update.message.reply_text(
                    f"{EMOJI['warning']} –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1.0 –¥–æ 5.0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return WAITING_FOR_RATING
            
            context.user_data['target_rating'] = rating
            await self.perform_analysis(update.message, context)
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                f"{EMOJI['warning']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 5.0:"
            )
            return WAITING_FOR_RATING
    
    async def perform_analysis(self, message, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        product_input = context.user_data.get('product_input')
        target_rating = context.user_data.get('target_rating')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        progress_msg = await message.reply_text(
            f"{EMOJI['clock']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–∞...\n"
            f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã</i>",
            parse_mode=ParseMode.HTML
        )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            result = await analyze_product_reviews(product_input, target_rating)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            stats = result['statistics']
            rating_dist = stats['rating_distribution']
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
            rating_bars = ""
            max_count = max(rating_dist.values()) if rating_dist else 1
            
            for rating in range(5, 0, -1):
                count = rating_dist.get(rating, 0)
                bar_length = int((count / max_count) * 20) if max_count > 0 else 0
                bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
                rating_bars += f"{rating}‚òÖ {bar} {count}\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = (
                f"{EMOJI['chart']} <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"{EMOJI['package']} <b>–¢–æ–≤–∞—Ä:</b> <code>{result['product_id']}</code>\n"
                f"{EMOJI['star']} <b>–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {result['current_rating']:.2f}\n"
                f"{EMOJI['target']} <b>–¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {result['target_rating']}\n\n"
                f"{EMOJI['rocket']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            )
            
            if result['required_5star_reviews'] == 0:
                response_text += f"{EMOJI['check']} –¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n\n"
            else:
                response_text += (
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å <b>{result['required_5star_reviews']}</b> "
                    f"–Ω–æ–≤—ã—Ö 5-–∑–≤–µ–∑–¥–æ—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤\n\n"
                )
            
            response_text += (
                f"{EMOJI['info']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {stats['active_reviews']}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {stats['average_age_days']:.0f} –¥–Ω–µ–π\n"
                f"‚Ä¢ –°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å: {result['total_weight']:.2f}\n\n"
                f"<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>\n"
                f"<pre>{rating_bars}</pre>"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await progress_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.reply_html(response_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
            product_url = f"https://www.ozon.ru/product/{result['product_id']}"
            await message.reply_text(
                f"üîó <a href='{product_url}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ Ozon</a>",
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            
        except Exception as e:
            await progress_msg.delete()
            error_text = (
                f"{EMOJI['cross']} <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:</b>\n"
                f"<i>{str(e)}</i>\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await message.reply_html(error_text)
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            f"{EMOJI['info']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return ConversationHandler.END
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                f"{EMOJI['warning']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.token).build()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("analyze", self.analyze_command),
                CallbackQueryHandler(self.button_callback, pattern="^start_analyze$")
            ],
            states={
                WAITING_FOR_PRODUCT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_product)
                ],
                WAITING_FOR_RATING: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_rating),
                    CallbackQueryHandler(self.button_callback, pattern="^rating_")
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("examples", self.examples_command))
        application.add_handler(conv_handler)
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = OzonReviewsBot(token)
    bot.run()


if __name__ == "__main__":
    main()