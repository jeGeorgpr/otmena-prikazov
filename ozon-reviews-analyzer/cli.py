#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ Ozon
"""
import asyncio
import argparse
import sys
import json
from typing import Optional
from pathlib import Path
import csv
from datetime import datetime

from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel
from rich import box
from rich.live import Live
from rich.layout import Layout

from ozon_reviews_analyzer import analyze_product_reviews


console = Console()


class OzonReviewsCLI:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    
    def __init__(self):
        self.console = console
        
    def create_parser(self) -> argparse.ArgumentParser:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        parser = argparse.ArgumentParser(
            description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ Ozon —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s analyze 123456789 --target 4.5
  %(prog)s analyze https://www.ozon.ru/product/example-123456 --target 4.7
  %(prog)s batch products.txt --target 4.5 --output results.csv
  %(prog)s analyze 123456 --format json > result.json
            """
        )
        
        subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
        
        # –ö–æ–º–∞–Ω–¥–∞ analyze
        analyze_parser = subparsers.add_parser(
            'analyze',
            help='–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞'
        )
        analyze_parser.add_argument(
            'product',
            help='URL —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª'
        )
        analyze_parser.add_argument(
            '--target', '-t',
            type=float,
            default=4.5,
            help='–¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4.5)'
        )
        analyze_parser.add_argument(
            '--format', '-f',
            choices=['table', 'json', 'csv'],
            default='table',
            help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: table)'
        )
        
        # –ö–æ–º–∞–Ω–¥–∞ batch
        batch_parser = subparsers.add_parser(
            'batch',
            help='–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤'
        )
        batch_parser.add_argument(
            'input_file',
            type=Path,
            help='–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)'
        )
        batch_parser.add_argument(
            '--target', '-t',
            type=float,
            default=4.5,
            help='–¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤'
        )
        batch_parser.add_argument(
            '--output', '-o',
            type=Path,
            help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
        )
        batch_parser.add_argument(
            '--format', '-f',
            choices=['csv', 'json'],
            default='csv',
            help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'
        )
        
        # –ö–æ–º–∞–Ω–¥–∞ monitor
        monitor_parser = subparsers.add_parser(
            'monitor',
            help='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞'
        )
        monitor_parser.add_argument(
            'product',
            help='URL —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª'
        )
        monitor_parser.add_argument(
            '--interval', '-i',
            type=int,
            default=3600,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3600)'
        )
        monitor_parser.add_argument(
            '--target', '-t',
            type=float,
            help='–£–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞'
        )
        
        return parser
    
    def format_table_output(self, result: dict) -> None:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_table = Table(title="–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ Ozon", box=box.ROUNDED)
        info_table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
        info_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        info_table.add_row("–ê—Ä—Ç–∏–∫—É–ª", result['product_id'])
        info_table.add_row("–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"‚≠ê {result['current_rating']:.2f}")
        info_table.add_row("–¶–µ–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥", f"üéØ {result['target_rating']}")
        
        if result['required_5star_reviews'] == 0:
            info_table.add_row(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ 5‚òÖ –æ—Ç–∑—ã–≤–æ–≤",
                "[green]‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞![/green]"
            )
        else:
            info_table.add_row(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ 5‚òÖ –æ—Ç–∑—ã–≤–æ–≤",
                f"[yellow]{result['required_5star_reviews']}[/yellow]"
            )
        
        self.console.print(info_table)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = result['statistics']
        stats_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤", box=box.SIMPLE)
        stats_table.add_column("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", style="cyan")
        stats_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="white")
        
        stats_table.add_row("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", str(stats['total_reviews']))
        stats_table.add_row("–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", str(stats['active_reviews']))
        stats_table.add_row(
            "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç",
            f"{stats['average_age_days']:.0f} –¥–Ω–µ–π"
        )
        
        self.console.print("\n")
        self.console.print(stats_table)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
        self.console.print("\n[bold]–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:[/bold]")
        
        dist = stats['rating_distribution']
        max_count = max(dist.values()) if dist else 1
        
        for rating in range(5, 0, -1):
            count = dist.get(rating, 0)
            bar_length = int((count / max_count) * 30) if max_count > 0 else 0
            bar = "‚ñà" * bar_length
            
            self.console.print(
                f"{rating}‚òÖ [{count:4d}] {bar}",
                style="yellow" if rating == 5 else "white"
            )
    
    def format_json_output(self, result: dict) -> None:
        """–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
        print(json.dumps(result, indent=2, ensure_ascii=False))
    
    def format_csv_output(self, result: dict) -> None:
        """–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"""
        writer = csv.writer(sys.stdout)
        writer.writerow([
            'product_id',
            'current_rating',
            'target_rating',
            'required_5star_reviews',
            'total_reviews',
            'active_reviews'
        ])
        
        stats = result['statistics']
        writer.writerow([
            result['product_id'],
            result['current_rating'],
            result['target_rating'],
            result['required_5star_reviews'],
            stats['total_reviews'],
            stats['active_reviews']
        ])
    
    async def analyze_single(self, args) -> None:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task(
                f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä {args.product}...",
                total=None
            )
            
            try:
                result = await analyze_product_reviews(
                    args.product,
                    args.target
                )
                
                progress.stop()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                if args.format == 'table':
                    self.format_table_output(result)
                elif args.format == 'json':
                    self.format_json_output(result)
                elif args.format == 'csv':
                    self.format_csv_output(result)
                    
            except Exception as e:
                progress.stop()
                self.console.print(
                    f"[red]–û—à–∏–±–∫–∞: {str(e)}[/red]"
                )
                sys.exit(1)
    
    async def analyze_batch(self, args) -> None:
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        if not args.input_file.exists():
            self.console.print(
                f"[red]–§–∞–π–ª {args.input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]"
            )
            sys.exit(1)
        
        products = [
            line.strip()
            for line in args.input_file.read_text().splitlines()
            if line.strip()
        ]
        
        if not products:
            self.console.print("[red]–§–∞–π–ª –ø—É—Å—Ç–æ–π[/red]")
            sys.exit(1)
        
        self.console.print(
            f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: [cyan]{len(products)}[/cyan]"
        )
        
        results = []
        errors = []
        
        with Progress(console=self.console) as progress:
            task = progress.add_task(
                "–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤...",
                total=len(products)
            )
            
            for i, product in enumerate(products):
                progress.update(
                    task,
                    description=f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {product}..."
                )
                
                try:
                    result = await analyze_product_reviews(
                        product,
                        args.target
                    )
                    results.append(result)
                except Exception as e:
                    errors.append({
                        'product': product,
                        'error': str(e)
                    })
                
                progress.advance(task)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i < len(products) - 1:
                    await asyncio.sleep(2)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.console.print(
            f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: [green]{len(results)}[/green]"
        )
        
        if errors:
            self.console.print(
                f"‚ùå –û—à–∏–±–æ–∫: [red]{len(errors)}[/red]"
            )
            for error in errors:
                self.console.print(
                    f"  - {error['product']}: {error['error']}"
                )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if args.output and results:
            self.save_batch_results(results, args.output, args.format)
        else:
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            self.print_batch_summary(results)
    
    def save_batch_results(
        self,
        results: list,
        output_file: Path,
        format: str
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if format == 'csv':
            with open(output_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow([
                    'product_id',
                    'current_rating',
                    'target_rating',
                    'required_5star_reviews',
                    'total_reviews',
                    'active_reviews',
                    'average_age_days'
                ])
                
                for result in results:
                    stats = result['statistics']
                    writer.writerow([
                        result['product_id'],
                        result['current_rating'],
                        result['target_rating'],
                        result['required_5star_reviews'],
                        stats['total_reviews'],
                        stats['active_reviews'],
                        stats['average_age_days']
                    ])
        
        elif format == 'json':
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(
                    results,
                    f,
                    indent=2,
                    ensure_ascii=False
                )
        
        self.console.print(
            f"[green]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}[/green]"
        )
    
    def print_batch_summary(self, results: list) -> None:
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–∞–∫–µ—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É"""
        table = Table(
            title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            box=box.ROUNDED
        )
        
        table.add_column("–ê—Ä—Ç–∏–∫—É–ª", style="cyan")
        table.add_column("–¢–µ–∫—É—â–∏–π", justify="right")
        table.add_column("–¶–µ–ª—å", justify="right")
        table.add_column("–ù—É–∂–Ω–æ 5‚òÖ", justify="right", style="yellow")
        table.add_column("–û—Ç–∑—ã–≤–æ–≤", justify="right")
        
        for result in results:
            stats = result['statistics']
            table.add_row(
                result['product_id'],
                f"{result['current_rating']:.2f}",
                f"{result['target_rating']}",
                str(result['required_5star_reviews']),
                str(stats['total_reviews'])
            )
        
        self.console.print(table)
    
    async def monitor_product(self, args) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        self.console.print(
            Panel(
                f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {args.product}\n"
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {args.interval} —Å–µ–∫",
                title="–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                box=box.ROUNDED
            )
        )
        
        previous_rating = None
        
        try:
            while True:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                result = await analyze_product_reviews(args.product, 4.5)
                current_rating = result['current_rating']
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
                info = f"""
üì¶ –ê—Ä—Ç–∏–∫—É–ª: {result['product_id']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {current_rating:.3f}
üìä –û—Ç–∑—ã–≤–æ–≤: {result['statistics']['total_reviews']}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                """
                
                if previous_rating is not None:
                    change = current_rating - previous_rating
                    if change > 0:
                        info += f"\nüìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{change:.3f}"
                    elif change < 0:
                        info += f"\nüìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:.3f}"
                    else:
                        info += f"\n‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
                if args.target and current_rating >= args.target:
                    info += f"\n\nüéâ [green]–¶–µ–ª—å {args.target} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞![/green]"
                
                self.console.clear()
                self.console.print(
                    Panel(
                        info.strip(),
                        title="–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                        box=box.ROUNDED
                    )
                )
                
                previous_rating = current_rating
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.console.print(
                    f"\n–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {args.interval} —Å–µ–∫..."
                )
                await asyncio.sleep(args.interval)
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ CLI"""
        parser = self.create_parser()
        args = parser.parse_args()
        
        if not args.command:
            parser.print_help()
            sys.exit(1)
        
        try:
            if args.command == 'analyze':
                await self.analyze_single(args)
            elif args.command == 'batch':
                await self.analyze_batch(args)
            elif args.command == 'monitor':
                await self.monitor_product(args)
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            sys.exit(0)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    cli = OzonReviewsCLI()
    asyncio.run(cli.run())


if __name__ == "__main__":
    main()