import crypto from 'crypto'

interface TBankPaymentParams {
  orderId: string
  amount: number
  email: string
  description: string
  userId: string
  contractId?: string
  metadata?: any
}

interface TBankInitResponse {
  Success: boolean
  ErrorCode?: string
  Message?: string
  PaymentId?: string
  PaymentURL?: string
  Status?: string
  TerminalKey?: string
  OrderId?: string
  Amount?: number
  Details?: string
}
 
// Function to generate signature
function generateSignature(params: Record<string, any>, password: string): string {
  // Create a copy of parameters for signing
  const signParams: Record<string, any> = {}
  
  // Add Password to parameters
  signParams.Password = password
  
  // Copy all parameters except Receipt, DATA and Token
  for (const key in params) {
    if (key !== 'Receipt' && key !== 'DATA' && key !== 'Token') {
      signParams[key] = params[key]
    }
  }
  
  // Sort keys alphabetically
  const sortedKeys = Object.keys(signParams).sort()
  
  // Concatenate values
  let signString = ''
  for (const key of sortedKeys) {
    const value = signParams[key]
    if (value !== undefined && value !== null) {
      signString += String(value)
    }
  }
  
  console.log('Signature string:', signString.substring(0, 50) + '...')
  console.log('Parameters for signature:', sortedKeys)
  
  // Generate SHA-256
  return crypto.createHash('sha256').update(signString).digest('hex')
}

export async function createPayment({
  orderId,
  amount,
  email,
  description,
  userId,
  contractId,
  metadata
}: TBankPaymentParams) {
  try {
    const terminalKey = process.env.TBANK_TERMINAL_KEY
    const secretKey = process.env.TBANK_SECRET_KEY
    const baseUrl = process.env.NEXTAUTH_URL || 'https://imyrist.ru'
    const notificationUrl = process.env.TBANK_NOTIFICATION_URL || `${baseUrl}/api/payments/webhook`

    if (!terminalKey || !secretKey) {
      console.error('T-Bank credentials not configured')
      return { success: false, error: 'Payment system not configured' }
    }

    // Generate return URLs based on payment type
    let successUrl = `${baseUrl}/payment/success`
    let failUrl = `${baseUrl}/payment/fail`
    
    // Determine payment type
    const isTopup = metadata?.type === 'topup' || !contractId
    
    if (isTopup) {
      successUrl += `?type=topup`
      failUrl += `?type=topup`
    } else if (contractId) {
      successUrl += `?contractId=${contractId}`
      failUrl += `?contractId=${contractId}`
    }

    // Prepare parameters - structure them exactly as in the working test
    const params = {
      TerminalKey: terminalKey,
      Amount: Math.round(amount * 100), // Ensure it's an integer in kopecks
      OrderId: orderId,
      Description: description,
      NotificationURL: notificationUrl,
      SuccessURL: successUrl,
      FailURL: failUrl,
      // Additional data
      DATA: {
        Email: email,
        UserId: userId,
        ...(contractId && { ContractId: contractId }),
        ...(metadata && { ...metadata })
      },
      // Receipt for online cash register
      Receipt: {
        Email: email,
        Taxation: "usn_income",
        Items: [{
          Name: description,
          Price: Math.round(amount * 100),
          Quantity: 1,
          Amount: Math.round(amount * 100),
          Tax: "none",
          PaymentMethod: "full_payment",
          PaymentObject: "service"
        }]
      }
    }

    // Generate signature - this should exclude Receipt, DATA, and Token
    const token = generateSignature(params, secretKey)
    const requestBody = { ...params, Token: token }

    console.log('Creating T-Bank payment:', {
      orderId,
      amount,
      amountInKopecks: Math.round(amount * 100),
      contractId: contractId || 'none',
      terminalKey: terminalKey.substring(0, 10) + '...'
    })

    // Send request
    const response = await fetch('https://securepay.tinkoff.ru/v2/Init', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    })

    const data: TBankInitResponse = await response.json()
    console.log('T-Bank response:', {
      Success: data.Success,
      ErrorCode: data.ErrorCode,
      Status: data.Status,
      PaymentId: data.PaymentId,
      PaymentURL: data.PaymentURL ? '***' : undefined,
      Message: data.Message,
      Details: data.Details
    })

    if (data.Success && data.PaymentURL) {
      return {
        success: true,
        paymentUrl: data.PaymentURL,
        paymentId: data.PaymentId
      }
    } else {
      console.error('T-Bank error:', data)
      return {
        success: false,
        error: data.Message || 'Failed to create payment'
      }
    }
  } catch (error) {
    console.error('T-Bank payment error:', error)
    return {
      success: false,
      error: 'Payment system error'
    }
  }
}

// Function to validate signature in notifications
export function validateNotification(params: Record<string, any>): boolean {
  const secretKey = process.env.TBANK_SECRET_KEY
  if (!secretKey) return false

  const { Token, ...checkParams } = params
  const calculatedToken = generateSignature(checkParams, secretKey)
  
  const isValid = calculatedToken === Token
  console.log('Notification validation:', {
    received: Token?.substring(0, 10) + '...',
    calculated: calculatedToken?.substring(0, 10) + '...',
    isValid
  })
  
  return isValid
}

// Function to check payment status
export async function checkPaymentStatus(paymentId: string) {
  try {
    const terminalKey = process.env.TBANK_TERMINAL_KEY
    const secretKey = process.env.TBANK_SECRET_KEY

    if (!terminalKey || !secretKey) {
      return { success: false, error: 'Payment system not configured' }
    }

    const params = {
      TerminalKey: terminalKey,
      PaymentId: paymentId
    }

    const token = generateSignature(params, secretKey)
    const requestBody = { ...params, Token: token }

    const response = await fetch('https://securepay.tinkoff.ru/v2/GetState', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    })

    const data = await response.json()
    
    return {
      success: data.Success,
      status: data.Status,
      amount: data.Amount,
      orderId: data.OrderId,
      message: data.Message
    }
  } catch (error) {
    console.error('Check payment status error:', error)
    return {
      success: false,
      error: 'Failed to check payment status'
    }
  }
}