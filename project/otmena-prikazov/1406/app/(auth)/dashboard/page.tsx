// app/(auth)/dashboard/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useSession } from 'next-auth/react'
import Stepper from '@/components/dashboard/Stepper'
import UnifiedUploadForm from '@/components/dashboard/UnifiedUploadForm'
import WalletBalance from '@/components/wallet/WalletBalance'
import { Wallet, CreditCard, AlertCircle, Plus } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'

type Step = 1 | 2 | 3 | 4 | 5

export default function DashboardPage() {
  const router = useRouter()
  const { data: session, status } = useSession()

  const [step, setStep] = useState<Step>(1)
  const [contractId, setContractId] = useState<number | null>(null)
  const [isPaymentEnabled, setIsPaymentEnabled] = useState(true)
  const [userBalance, setUserBalance] = useState<number>(0)
  const [paymentMethod, setPaymentMethod] = useState<'balance' | 'direct'>('balance')
  const [showPaymentChoice, setShowPaymentChoice] = useState(false)

  // Redirect if not authenticated
  useEffect(() => {
    if (status === 'loading') return
    if (!session) {
      router.push('/auth/signin')
    }
  }, [session, status, router])

  // Fetch user balance
  const fetchBalance = async () => {
    try {
      const res = await fetch('/api/balance')
      if (res.ok) {
        const data = await res.json()
        setUserBalance(data.balance)
      }
    } catch (error) {
      console.error('Error fetching balance:', error)
    }
  }

  useEffect(() => {
    if (session) {
      fetchBalance()
    }
  }, [session])

  // Check for payment configuration on mount
  useEffect(() => {
    const checkPaymentConfig = async () => {
      try {
        const res = await fetch('/api/config/payment-status')
        if (res.ok) {
          const data = await res.json()
          setIsPaymentEnabled(data.enabled)
        }
      } catch (error) {
        setIsPaymentEnabled(false)
      }
    }
    
    checkPaymentConfig()
  }, [])

  // Poll for contract status
  useEffect(() => {
    if (!contractId || step < 3) return

    const checkStatus = async () => {
      try {
        const res = await fetch(`/api/contracts/${contractId}/status`)
        if (!res.ok) return

        const data = await res.json()

        if (data.status === 'processing') {
          setStep(4)
        } else if (data.status === 'done') {
          router.push(`/report/${contractId}`)
        } else if (data.status === 'error') {
          setStep(5)
        }
      } catch (error) {
        console.error('Status check error:', error)
      }
    }

    // Initial check
    checkStatus()

    // Poll every 2 seconds
    const interval = setInterval(checkStatus, 2000)

    return () => clearInterval(interval)
  }, [contractId, step, router])

  // After successful upload
  async function afterUpload(id: number) {
    setContractId(id)
    
    if (!isPaymentEnabled) {
      // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –±–µ–∑ –æ–ø–ª–∞—Ç—ã
      setStep(3)
      setTimeout(() => {
        startAnalysis(id)
      }, 1000)
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    setShowPaymentChoice(true)
  }

  async function handlePaymentChoice(method: 'balance' | 'direct') {
    setPaymentMethod(method)
    setShowPaymentChoice(false)

    if (method === 'balance') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      if (userBalance < 199) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–æ–π.')
        setShowPaymentChoice(true)
        return
      }

      // –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      try {
        const res = await fetch('/api/contracts/pay-from-balance', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ contractId })
        })

        if (res.ok) {
          const data = await res.json()
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ª–æ–∫–∞–ª—å–Ω–æ
          setUserBalance(data.newBalance)
          setStep(3)
          startAnalysis(contractId!)
        } else {
          const error = await res.json()
          alert(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å –±–∞–ª–∞–Ω—Å–∞')
          setShowPaymentChoice(true)
        }
      } catch (error) {
        console.error('Payment error:', error)
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ')
        setShowPaymentChoice(true)
      }
    } else {
      // –ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
      setStep(2)
      setTimeout(() => {
        router.push(`/payment?contractId=${contractId}`)
      }, 1000)
    }
  }

  async function startAnalysis(id: number) {
    try {
      const res = await fetch('/api/contracts/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contractId: id })
      })

      if (!res.ok) {
        throw new Error('Analysis failed')
      }
    } catch (error) {
      console.error('Analysis error:', error)
      setStep(5)
    }
  }

  // Check if returning from payment
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search)
    const fromPayment = urlParams.get('fromPayment')
    const paidContractId = urlParams.get('contractId')
    
    if (fromPayment === 'true' && paidContractId) {
      const id = parseInt(paidContractId)
      setContractId(id)
      setStep(3)
      
      const newUrl = window.location.pathname
      window.history.replaceState({}, '', newUrl)
      
      startAnalysis(id)
    }
  }, [])

  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#005bff] mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* CTA Banner - —É–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
      <section className="mx-auto max-w-7xl px-4 sm:px-6 py-4 sm:py-6">
        <div className="rounded-xl bg-gradient-to-r from-[#005bff] via-[#005bff] to-[#090089] text-white py-8 sm:py-10 md:py-14 px-4 sm:px-6 text-center space-y-3 sm:space-y-4">
          <h1 className="font-heading text-xl sm:text-2xl md:text-3xl font-semibold">
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω {isPaymentEnabled ? '–∑–∞ 199 —Ä—É–±.' : '–±–µ—Å–ø–ª–∞—Ç–Ω–æ'}
          </h1>
          <p className="max-w-2xl mx-auto text-sm sm:text-base md:text-lg opacity-90">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–∞—à–µ–≥–æ AI-–Æ–†–ò–°–¢–ê
          </p>
          {!isPaymentEnabled && (
            <p className="text-xs sm:text-sm opacity-75">
              üéâ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
            </p>
          )}
        </div>
      </section>

      {/* Main content - —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ */}
      <div className="mx-auto max-w-6xl px-4 sm:px-6 py-4 sm:py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">
          {/* Left column - Wallet - –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ä—Ö—É –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ */}
          <div className="lg:col-span-1 order-2 lg:order-1">
            <WalletBalance />
            
            {/* Quick actions */}
            <Card className="mt-4">
              <CardContent className="p-3 sm:p-4">
                <h3 className="font-medium mb-2 sm:mb-3 text-sm sm:text-base">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                <div className="space-y-2">
                  <Button 
                    variant="outline" 
                    className="w-full justify-start text-sm"
                    onClick={() => router.push('/wallet/topup')}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
                  </Button>
                  <Button 
                    variant="outline" 
                    className="w-full justify-start text-sm"
                    onClick={() => router.push('/wallet/history')}
                  >
                    <Wallet className="h-4 w-4 mr-2" />
                    –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right column - Upload and process */}
          <div className="lg:col-span-2 order-1 lg:order-2">
            {/* Stepper - —É–ª—É—á—à–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            <div className="mb-6 sm:mb-8">
              <Stepper steps={[
                { id: 1, name: '–ó–∞–≥—Ä—É–∑–∫–∞', status: step > 1 ? 'complete' : step === 1 ? 'current' : 'upcoming' },
                { id: 2, name: '–û–ø–ª–∞—Ç–∞', status: step > 2 ? 'complete' : step === 2 ? 'current' : 'upcoming' },
                { id: 3, name: '–ê–Ω–∞–ª–∏–∑', status: step > 3 ? 'complete' : step === 3 ? 'current' : 'upcoming' },
                { id: 4, name: '–ì–æ—Ç–æ–≤–æ', status: step === 4 ? 'current' : step > 4 ? 'complete' : 'upcoming' }
              ]} />
            </div>

            {step === 1 && !showPaymentChoice && (
              <div>
                <UnifiedUploadForm onStepComplete={afterUpload} />
              </div>
            )}

            {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - —É–ª—É—á—à–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            {showPaymentChoice && (
              <Card>
                <CardContent className="p-4 sm:p-6">
                  <h2 className="text-lg sm:text-xl font-semibold mb-3 sm:mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>
                  <div className="space-y-3 sm:space-y-4">
                    {/* –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ */}
                    <button
                      onClick={() => handlePaymentChoice('balance')}
                      className={`w-full p-3 sm:p-4 border-2 rounded-lg hover:border-[#005bff] transition-colors text-left ${
                        userBalance < 199 ? 'opacity-60 cursor-not-allowed' : ''
                      }`}
                      disabled={userBalance < 199}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2 sm:gap-3 min-w-0">
                          <Wallet className="h-5 w-5 sm:h-6 sm:w-6 text-[#005bff] flex-shrink-0" />
                          <div className="min-w-0">
                            <p className="font-medium text-sm sm:text-base">–û–ø–ª–∞—Ç–∏—Ç—å —Å –∫–æ—à–µ–ª—å–∫–∞</p>
                            <p className="text-xs sm:text-sm text-gray-600 truncate">
                              –ë–∞–ª–∞–Ω—Å: {new Intl.NumberFormat('ru-RU', {
                                style: 'currency',
                                currency: 'RUB',
                                minimumFractionDigits: 0
                              }).format(userBalance)}
                            </p>
                          </div>
                        </div>
                        <span className="text-base sm:text-lg font-semibold flex-shrink-0">199 ‚ÇΩ</span>
                      </div>
                      {userBalance < 199 && (
                        <p className="text-xs sm:text-sm text-red-600 mt-2">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</p>
                      )}
                    </button>

                    {/* –ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π */}
                    <button
                      onClick={() => handlePaymentChoice('direct')}
                      className="w-full p-3 sm:p-4 border-2 rounded-lg hover:border-[#005bff] transition-colors text-left"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2 sm:gap-3 min-w-0">
                          <CreditCard className="h-5 w-5 sm:h-6 sm:w-6 text-[#005bff] flex-shrink-0" />
                          <div className="min-w-0">
                            <p className="font-medium text-sm sm:text-base">–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π</p>
                            <p className="text-xs sm:text-sm text-gray-600">Visa, Mastercard, –ú–ò–†</p>
                          </div>
                        </div>
                        <span className="text-base sm:text-lg font-semibold flex-shrink-0">199 ‚ÇΩ</span>
                      </div>
                    </button>

                    {/* –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ */}
                    {userBalance < 199 && (
                      <Button
                        variant="outline"
                        className="w-full text-sm"
                        onClick={() => router.push('/wallet/topup')}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
                      </Button>
                    )}
                  </div>

                  {userBalance >= 199 && (
                    <div className="mt-3 sm:mt-4 p-2.5 sm:p-3 bg-blue-50 rounded-lg">
                      <p className="text-xs sm:text-sm text-blue-900 flex items-start gap-2">
                        <AlertCircle className="h-3.5 w-3.5 sm:h-4 sm:w-4 mt-0.5 flex-shrink-0" />
                        <span>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è {new Intl.NumberFormat('ru-RU', {
                          style: 'currency',
                          currency: 'RUB',
                          minimumFractionDigits: 0
                        }).format(userBalance - 199)}</span>
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

            {step === 2 && (
              <div className="text-center py-12 sm:py-20">
                <div className="inline-flex items-center justify-center w-14 h-14 sm:w-16 sm:h-16 mb-4 bg-blue-100 rounded-full">
                  <svg className="w-7 h-7 sm:w-8 sm:h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                </div>
                <h2 className="font-heading text-xl sm:text-2xl mb-3 sm:mb-4">–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ</h2>
                <p className="text-sm sm:text-base text-gray-600 mb-4 sm:mb-6">
                  –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥—É
                </p>
                <div className="animate-pulse">
                  <p className="text-xs sm:text-sm text-gray-500">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã...</p>
                </div>
              </div>
            )}

            {(step === 3 || step === 4) && (
              <div className="text-center py-12 sm:py-20">
                <div className="inline-flex items-center justify-center w-14 h-14 sm:w-16 sm:h-16 mb-4">
                  <div className="animate-spin rounded-full h-14 w-14 sm:h-16 sm:w-16 border-b-2 border-[#005bff]"></div>
                </div>
                <h2 className="font-heading text-xl sm:text-2xl mb-3 sm:mb-4">
                  –ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞
                </h2>
                <p className="text-base sm:text-lg text-gray-600">
                  –≠—Ç–æ –∑–∞–π–º—ë—Ç ‚âà 1 –º–∏–Ω—É—Ç—É‚Ä¶
                </p>
                <div className="mt-4 sm:mt-6 max-w-md mx-auto">
                  <div className="text-xs sm:text-sm text-gray-500 text-left space-y-2">
                    <p className="flex items-center">
                      <span className="text-green-600 mr-2">‚úì</span>
                      –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω
                    </p>
                    {isPaymentEnabled && (
                      <p className="flex items-center text-green-600">
                        <span className="mr-2">‚úì</span>
                        –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ {paymentMethod === 'balance' && '(—Å –∫–æ—à–µ–ª—å–∫–∞)'}
                      </p>
                    )}
                    <p className={`flex items-center ${step >= 4 ? 'text-green-600' : ''}`}>
                      <span className="mr-2">{step >= 4 ? '‚úì' : '‚è≥'}</span>
                      AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    </p>
                    <p className="flex items-center text-gray-400">
                      <span className="mr-2">‚è≥</span>
                      –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
                    </p>
                  </div>
                </div>
              </div>
            )}

            {step === 5 && (
              <div className="text-center space-y-4 py-12 sm:py-20">
                <div className="inline-flex items-center justify-center w-14 h-14 sm:w-16 sm:h-16 mb-4 bg-red-100 rounded-full">
                  <svg className="w-7 h-7 sm:w-8 sm:h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </div>
                <h2 className="font-heading text-xl sm:text-2xl">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
                <p className="text-sm sm:text-base text-gray-600 px-4">
                  –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. 
                  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
                </p>
                <button
                  onClick={() => {
                    setStep(1)
                    setContractId(null)
                    setShowPaymentChoice(false)
                  }}
                  className="inline-block bg-[#005bff] hover:bg-[#0048cc] text-white px-5 sm:px-6 py-2 rounded-lg transition-colors text-sm sm:text-base"
                >
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* How it works section - —É–ª—É—á—à–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      <section id="how" className="mx-auto max-w-6xl py-12 sm:py-16 md:py-20 px-4 sm:px-6 text-center space-y-6 sm:space-y-8 md:space-y-10">
        <h2 className="font-heading text-2xl sm:text-3xl font-semibold">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h2>

        <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 sm:gap-8 md:gap-10">
          {[
            { icon: '‚¨Ü', title: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å', desc: '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ DOCX –∏–ª–∏ PDF' },
            { icon: '‚öôÔ∏è', title: 'AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç', desc: '–ù–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ò–ò –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∏—Å–∫–∏ –∑–∞ 1 –º–∏–Ω—É—Ç—É' },
            { icon: '‚úÖ', title: '–ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç', desc: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞' },
          ].map((item, i) => (
            <div key={i} className="space-y-2 sm:space-y-3">
              <div className="mx-auto h-10 w-10 sm:h-12 sm:w-12 flex items-center justify-center rounded-full bg-green-100 text-xl sm:text-2xl">
                {item.icon}
              </div>
              <h3 className="font-semibold text-sm sm:text-base">{item.title}</h3>
              <p className="text-xs sm:text-sm text-gray-600">{item.desc}</p>
            </div>
          ))}
        </div>
      </section>
    </>
  )
}